@page "/"

@using Family.Data
@using Family.Persistence
@inject IAdultRepository Repo

<h1>Adults</h1>

<div class="my-3">
    <input class="form-control" type="text" placeholder="Search..."
           @onchange="async e => filtered = await Repo.FindByNameContains(e.Value.ToString())"/>
</div>
<div>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <AuthorizeView Policy="MustBeLoggedIn">
                <th>Actions</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @if (filtered == null)
        {
            <p>LOADING...</p>
        }
        else
        {
            @foreach (var adult in filtered)
            {
                <tr>
                    <td>@adult.firstName @adult.lastName</td>
                    <td>@adult.hairColor</td>
                    <td>@adult.eyeColor</td>
                    <td>@adult.age</td>
                    <td>@adult.weight</td>
                    <td>@adult.height</td>
                    <td>@adult.sex</td>
                    <AuthorizeView Policy="MustBeLoggedIn">
                        <td>
                            <button class="btn btn-danger" @onclick="@(async e => await DeleteAdult(adult.id))">Delete</button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@code {

    private List<Adult> filtered;

    protected override async void OnInitialized()
    {
        filtered = await Repo.GetAll();
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task DeleteAdult(int id)
    {
         await Repo.Delete(id);

        OnInitialized();
    }

}